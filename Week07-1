1초 마다 if 문 실행하기
- setup() 과 loop() 함수는 아두이노의 기본
- setup()은 단 한번 만 실행되고 loop()는 여러번 실행됨
- 아두이노 보드에는 여러 센서와 디스플레이 장치가 붙어있다
-프로그램 작성시 장치들을 골고루 시간을 할당해야 한다.
-블로킹(Blocking) : 특정 기능 수행에 로직을 묶어 놓아서 다른 일을 못하게 되면 프로그램이 블로킹 되었다고 한다
-논 블로킹(non-Blocking) : 반대로 여러가지 기능을 수행하는 것이 논 블로킹 방식이다 아두이노에서도 논 블로킹 방식으로 프로그래밍 해야 한다.

-delay() 소프트웨어적으로 구현된 Busy-wait 방식 블로킹 함수
-millis() 타이머 0 이라는 하드웨어 타이머를 이용하여 시간 측정
-하지만 delay() 자체는 CPU를 멈추고 루프를 돌리는 소프트웨어적인 방식

-인터럽트(Interrupt)는 외부의 자극이나 시간에 의해 마이크로컨트롤러에 긴급히 전달되는 신호이다
-인터럽트는 우선순위가 정해져 있다 
EX) PC에서는 종료버튼이 최우선이다
-타이머는 마이크로 컨트롤러에 포함된 하드웨어 장치로 보드의 종류에 따라 프로그램 작성 방법이 다르다. 
================================================================
1초 동안 loop()의 실행 횟수를 세어서 출력한다.

void setup(){
  Serial.begin(115200);
  Serial.println();
}

void loop(){
  //지역변수 loopCnt, nextMil 을 선언함
  //millis()는 가동 시간을 밀리초 단위로 알려주는 아두니도 내장함수
  //nextMil은 1초 후를 나타내는 변수이므로 millis() + 1000으로 초기화 한다.
  static unsigned long loopCnt = 0;           //static을 사용하지않은면 0으로 초기화됨 결과 값 1이 나옴
  static unsigned long nextMil = millis() + 1000;  //static을 사용하지않은면 출력이 되고는 있지만 if문까지 도달하지 못함 그래서 print되지 못함

  loopCnt++;	//loop가 실행될 때마다 loopCnt를 1 증가 시킨다.

  //1초마다 if 블록을 수 
  if (millis() > nextMil) {
    nextMil = millis() + 1000;
    Serial.println(loopCnt);
    loopCnt = 0;
  }
}


=============================================================
SimpleTimer는 하드웨어 타이머나 인터럽트 대신 millis()함수 기반으로 작성된 통상적인 외부 클래스이다 
마이크로컨트롤러 종류와 상관 없이 사용할 수 있다 

#include <SimpleTimer.h>    //앞에 설치한 라이브러리는 1행에 추가
SimpleTimer timerCnt;       //해더파일에 SimpleTimer 생성자를 이용해 오브젝트 timerCnt를 생성했다
                            //timerCnt에 앞이 비어있음
unsigned long loopCnt;

void timerCntFunc(){
  Serial.println(loopCnt);
  loopCnt = 0;
}


void setup(){
  Serial.begin(115200);
  Serial.println();
  //앞에서선언한timerCnt에setInterval()메소드를 붙여 실행한다. 
  //첫번째인수로실행간격을밀리초로지정하고 두번째인수로함수를지정한다. 
  //이때함수는일반함수다.
  timerCnt.setInterval(1000, timerCntFunc);  //milli-ser,func
}

void loop(){
  timerCnt.run();             //반드시 loop안에서 run()이 실행되어야함, timerCnt 인스턴스
  loopCnt++;		      //메소드가  충족하면 지어한 함수가 실행된다.
}

loop의 반복 시기가 일정하지 않을 수 있다 따라서
SimpleTimer 오브젝트에서 지정한 함수의 수행시간도 달라질 수 있다
simpleTimer의 주된 용도는 1초 간격으로 센서 데이터를 취득하는 것이다
LED 제어와 같이 정확한 시간이 중요한 Ticker를 사용
loop()의 수행속도에 맞춰 센서 데이터를 취득하는 것이 중요한 경우에는 SimpleTimer를 사용한다  
==========================================================

아두이노만에 함수 호출법
-사용한 인수를 매개 변수에서 참조하여 사용하는 방법
 -함수 호풀 시 인수로 사용한 변숫값을 함수 내에서 수정하여면 함수의 매개변수 다음에 '&' 을 붙인다
 -&는 변수의 주소를 전달하는 역할을 한다
int a1 = 2;
int a2 = 3;
int a3;

void setup(){
  Serial.begin(115200);
  Serial.println();

  sum(a1, a2, a3);
  Serial.println(a3);
}


void loop() {

}

void sum(int a, int b, int& c){       //함수 호출시  변수값을 함수 내에서 수정하려면 함수의 매개변수 다음을 &을 붙인다
  c = a + b;                          //sum() 함수의 세번째 매개 변수 c가 참조 형식으로 선언되다 
}

함수 출력 시 인수로 지정한 변숫값을 함수에서 바꿔 출력하는 경우를 보여준다
====================================================================
함수 오버로딩(Function overloading)
- 여러 함수가 유사 기능을 지니며 받는 변수형이나 매개 변수의 데이터형, 개수 등이 가른 경우 같은 이름을 사용하면 편하다
- 같은 이름에 매개 변수형이나 개수를 다르게 갖는 것이 함수 오버로딩 이라고 한다  
즉 같은 이름에 매개 변수나 개수를 다르게 갖는 것을 함수 오버로딩이라고 한다

함수 프로토타입(Function prototype)
- 함수는 돌려박을 변수형, 함수 이름, 매개 변수의 속겅 정보나 개수를 미리 정해야 한다 <- 함수의 요약 정보를 함수 프로토타입이라고 한다
- 함수 프로토타입이 선언되어 있으면 이후에도 편한 곳에서 함수선언 가능
- 아두이노 IDE는 전처리 과정에서 프로토타입 setup() 함수 앞 부분에 자동으로 넣어줌
- C++의 기본 기능이 아니라 IDE의 부가기능 이다

함수 프로토타입을 꼭 작성해야 하는 경우
-오브젝트 생성 시 인수로 함수를 지정하면 setup()보다 앞이므로 반드시 선언해야 한다  
====================================================================
클래스 작성

#ifndef LedToggle_h		//#ifndef은 if not define를 줄인 말 처음 #include한 후 ifndef는 거짓이 되어 실행X
#define LedToggle_h

#include "Arduino.h"

class LedToggle {
	public:
		LedToggle(int pin);
		Void toggle();
		
		
	private:
		int _pin;
		bool _state;
};				//클래스는 함수가 아니라 명령어 이므로 끝에 ;를 붙인다
=============================================================================
{}안에 pubilc과 private를 붙여서 두 영역으로 나눈
Public 영역은 클래스 외부에 알려져야 할 메소드의 프로토타입을 정의한다. 
private 영역에는 메소드 안에서 사용할 함수나 변수를 선언한다.
이값은 외부에 알려지지 않는다.
생성자(constructor) : 클래스 이름과 같은 이름을 가진 특별한 함수
==============================================================================
cpp 작성

#include "LedToggle.h"

LedToggle::LedToggle(int pin) {
	_pin = pin;
	_state = false;
	pinMode(_pin, OUTPUT);
	digitalWrite(_pin, LOW);
	
}

void LedToggle::toggle() {
	_state = !_state;
	digitalWrite(_pin, _state ? HIGH : LOW);
}
=============================================================================

범위 지정 연산자(::)
-class문 밖에서 클래스에 속한 메소드를 작성할 때는 이름 앞에 class_name:: 을 붙여 클래스의 소속을 표시한다
-범위 지정 연산자(::) 사용을 제외하면 메소드 작성과 일반 함수작성은 똑같다  

클래스 장점
-클래스를 별도 파일로 보관하면 재사용시 클래스를 선언하고 생성자. 메소드 사용법만 알면 된다

생성자
-생성자 앞에는 void나 변수형이 붙지 않으므로 다른 메소드와 구분된다

*5주차 115p 사진과 함께 확
라이브러리 파일 구조
- 라이브러리가 Led.h와 Led.cpp 파일로 구성되어 있으면 다음 파일 구조를 가진다. 초록색 부분은 폴더를 의미한다.
- Led.*cpp*와 Led.*h* 파일은 필수적이다.
